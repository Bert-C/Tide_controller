/* Tide_controller_progmem_v1

  TODO: Move integer harmonic constants into PROGMEM
  
  Copyright (C) 2012 Luke Miller
  
      This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
  
  
  This program is designed to calculate the current tide height
  and control a motor that changes the water level in a tank.

  Written under v1.0 of the Arduino IDE.
  
  The harmonics constants for the tide prediction are taken from 
  the XTide harmonics file. The original harmonics.tcd file is 
  available at 
  http://www.flaterco.com/xtide/files.html
  As with XTide, the predictions generated by this program should
  not be used for navigation, and no accuracy or warranty is given
  or implied for these tide predictions. Hell, the chances are 
  pretty good that the tide predictions generated here are 
  completely wrong.
*/
//********************************************************************************


// Initial setup
#include <avr/pgmspace.h>    // Needed to store values in PROGMEM
#include <Wire.h>            // For communication with real time clock
#include <RTClib.h>          // For real time clock
//----------------------------------------------------------------------------------
// Initialize harmonic constant arrays. These each hold 37 values for
// the tide site that was extracted using the R scripts. If you wish
// to make predictions for a different site, it will be necessary to
// replace the Amp and Kappa values with values particular to your
// site. These are available from NOAA's http://tidesandcurrent.noaa.gov site.
// Kappa here is referred to as "Phase" on NOAA's site. The order of the
// constants is shown below in the names. Unfortunately this does not match
// NOAA's order, so you will have to rearrange NOAA's values if you want to 
// put new site values in here.
// The Speed, Equilarg and Nodefactor arrays can all stay the same for any 
// site. 
// All tide predictions are output in Greenwich Mean Time. 

// Selected station:  Monterey, Monterey Harbor, California 
// The 'datum' printed here is the difference between mean sea level and 
// mean lower low water for the NOAA station. These two values can be 
// found for NOAA tide reference stations on the tidesandcurrents.noaa.gov
//  site under the datum page for each station.
const float Datum = 2.8281 ; // units in feet
// Harmonic constant names: J1, K1, K2, L2, M1, M2, M3, M4, M6, M8, N2, 2N2, O1, OO1, P1, Q1, 2Q1, R2, S1, S2, S4, S6, T2, LDA2, MU2, NU2, RHO1, MK3, 2MK3, MN4, MS4, 2SM2, MF, MSF, MM, SA, SSA
// These names match the NOAA names, except LDA2 here is LAM2 on NOAA's site
// Amp scaled by 1000, divide by 1000 to convert to original float value
PROGMEM prog_uint16_t Amp[] = {71,1199,121,23,38,1616,0,0,0,0,368,44,753,36,374,134,16,3,33,428,0,0,22,11,41,72,26,0,0,0,0,0,0,0,0,157,90};
// Kappa scaled by 10, so divide by 10 to convert to original float value
PROGMEM prog_uint16_t Kappa[] = {2334,2198,1720,2202,2259,1811,0,0,0,0,1546,1239,2034,2502,2156,1951,1994,1802,3191,1802,0,0,1678,1807,1146,1611,1966,0,0,0,0,0,0,0,0,2060,2839};
// Speed is unscaled, stored as the original float values
typedef float PROGMEM prog_float_t; // Need to define this type before use
PROGMEM prog_float_t Speed[] = {15.58544,15.04107,30.08214,29.52848,14.49669,28.9841,43.47616,57.96821,86.95231,115.9364,28.43973,27.89535,13.94304,16.1391,14.95893,13.39866,12.85429,30.04107,15,30,60,90,29.95893,29.45563,27.96821,28.51258,13.47151,44.02517,42.92714,57.42383,58.9841,31.0159,1.098033,1.015896,0.5443747,0.0410686,0.0821373};
// Equilarg scaled by 100. Divide by 100 to get original value.
PROGMEM prog_uint16_t Equilarg[4][37] = { 
{17495,1851,21655,15782,23131,19425,29137,2850,22275,5700,4193,24962,17162,5364,34993,1930,22699,17692,18000,0,0,0,308,2959,2660,17891,15628,21276,999,23618,19425,16575,3101,16575,15232,28007,20013},
{27537,1770,21457,34814,15957,27019,22529,18038,9058,77,1609,12198,24892,33361,34919,35482,10072,17765,18000,0,0,0,235,28737,17891,7302,5175,28789,16269,28627,27019,8981,31235,8981,25410,28081,20162},
{2,1486,20897,18274,7278,1035,19553,2071,3106,4142,2753,4470,35316,22123,34943,1033,2751,17739,18000,0,0,0,261,19806,1982,265,34546,2521,585,3788,1035,34965,20404,34965,34283,28057,20115},
{8338,1130,20240,366,32299,11042,16563,22084,33126,8168,3886,32732,9858,10509,34967,2703,31549,17714,18000,0,0,0,286,10865,22064,29219,28036,12172,20954,14929,11042,24958,9325,24958,7155,28033,20067} 
 };

// Nodefactor scaled by 10000. Divide by 10000 to get original float value.
PROGMEM prog_uint16_t Nodefactor[4][37] = { 
{9491,9602,8878,11647,11232,10169,10257,10343,10519,10698,10169,10169,9349,7887,10000,9349,9349,10000,10000,10000,10000,10000,10000,10169,10169,10169,9349,9765,9931,10343,10169,10169,8592,10169,10577,10000,10000},
{8928,9234,8156,12048,8780,10271,10411,10552,10839,11134,10271,10271,8748,6334,10000,8748,8748,10000,10000,10000,10000,10000,10000,10271,10271,10271,8748,9485,9743,10552,10271,10271,7448,10271,10936,10000,10000},
{8492,8957,7680,10216,13201,10344,10520,10699,11067,11448,10344,10344,8290,5315,10000,8290,8290,10000,10000,10000,10000,10000,10000,10344,10344,10344,8290,9265,9583,10699,10344,10344,6642,10344,11190,10000,10000},
{8278,8824,7472,8780,15575,10377,10571,10768,11173,11594,10377,10377,8068,4868,10000,8068,8068,10000,10000,10000,10000,10000,10000,10377,10377,10377,8068,9156,9501,10768,10377,10377,6271,10377,11307,10000,10000} 
 };

// Define unix time values for the start of each year.
//                                      2012       2013       2014       2015
PROGMEM prog_uint32_t startSecs[] = {1325376000,1356998400,1388534400,1420070400};

// 1st year of data in the Equilarg/Nodefactor/startSecs arrays.
const unsigned int startYear = 2012;
//------------------------------------------------------------------



// Define some variables that will hold float-converted versions of the constants above
float currAmp;
float currSpeed;
float currNodefactor;
float currEquilarg;
float currKappa;
//------------------------------------------------------------------------------------------------
// Real Time Clock setup
RTC_DS1307 RTC;
unsigned int YearIndx = 0;    // Used to index rows in the Equilarg/Nodefactor arrays
float currHours = 0;          // Elapsed hours since start of year
const int adjustGMT = 8;     // Time zone adjustment to get time in GMT. Make sure this is
                             // correct for the local standard time of the tide station. 
                             // No daylight savings time adjustments should be made. 

int secs = 0; // Keep track of previous seconds value in main loop
int currMinute; // Keep track of current minute value in main loop
//------------------------------------------------------------------------------------------------

float currPos = 6.0; // Current position, based on limit switch height. Units = ft.
float results = currPos;

//---------------------------------------------------------------------------


//**************************************************************************
// Welcome to the setup loop
void setup(void)
{  
  Wire.begin();
  RTC.begin();

  //************************************
  // For debugging
  Serial.begin(115200);
  //************************************
  DateTime now = RTC.now();
  currMinute = now.minute(); // Store current minute value
  printTime(now);
  delay(2000);
  
}

//**************************************************************************
// Welcome to the Main loop
void loop(void)
{
//  Serial.println("Amp values: ");
//  for (int i = 0; i < 37; i++) {
//    Serial.println(pgm_read_word_near(Amp + i));
//    delay(500);
//  }
//  Serial.println("Kappa values: ");
//  for (int i = 0; i < 37; i++) {
//    Serial.println(pgm_read_word_near(Kappa + i));
//    delay(1000);
//  }  
//  Serial.println("Equilarg values: ");
//  for (int row = 0; row < 4; row++) {
//    Serial.print("Row ");
//    Serial.println(row);
//   for (int col = 0; col < 37; col++) {
//     Serial.println(pgm_read_word_near(&Nodefactor[row][col]));
//     delay(1200);
//   }
//  }
//    Serial.println("Speed values: ");
//    for (int i = 0; i < 37; i++) {
//      Serial.println(pgm_read_float_near(&Speed[i]), 5);
////      Serial.println(pgm_read_float_near(Speed + i), 5);  // either version works
//      delay(1200);
//    }
//      for (int i = 0; i < 4; i++){
//       Serial.println(pgm_read_dword_near(&startSecs[i]));
//      delay(1000); 
//      }
//****************************************************

  // Get current time, store in object 'now'
  DateTime now = RTC.now();
  
  // If it is the start of a new minute, calculate new tide height
  if (now.minute() != currMinute) {
    // If now.minute doesn't equal currMinute, a new minute has turned
    // over, so it's time to update the tide height. We only want to do
    // this once per minute. 
    currMinute = now.minute();                   // update currMinute
    
    // Calculate difference between current year and starting year.
    // As subsequent years elapse, this value will increment and be 
    // used to access the correct row of the Equalargs + Nodefactor
    // arrays.
    YearIndx = now.year() - startYear;
    // Calculate hours since start of current year. Hours = seconds / 3600
    currHours = (now.unixtime() - pgm_read_dword_near(&startSecs[YearIndx])) / float(3600);
    // Shift currHours to Greenwich Mean Time
    currHours = currHours + adjustGMT;
    Serial.println();
    printTime(now);    
    Serial.print("Previous tide ht: ");
    Serial.print(results,3);
    Serial.println(" ft.:");   
    // *****************Calculate current tide height*************
    results = Datum; // initialize results variable, units of feet.
    for (int harms = 0; harms < 37; harms++) {
      // Many of the constants are stored as unsigned integers to save space. These
      // steps convert them back to their real values.
      currNodefactor = pgm_read_word_near(&Nodefactor[YearIndx][harms]) / float(10000);
      currAmp = pgm_read_word_near(&Amp[harms]) / float(1000);
      currEquilarg = pgm_read_word_near(&Equilarg[YearIndx][harms]) / float(100);
      currKappa = pgm_read_word_near(&Kappa[harms]) / float(10);
      currSpeed = pgm_read_float_near(&Speed[harms]); // Speed was not scaled to integer

    // Calculate each component of the overall tide equation 
    // The currHours value is assumed to be in hours from the start of the
    // year, in the Greenwich Mean Time zone, not the local time zone.
    // There is no daylight savings time adjustment here.  
      results = results + (currNodefactor * currAmp * 
        cos( (currSpeed * currHours + currEquilarg - currKappa) * DEG_TO_RAD));
    }
    //******************End of Tide Height calculation*************    
    //********************************
    // For debugging
    // Print current time to serial monitor
     Serial.print("Current Tide ht: ");
     Serial.print(results,3);
     Serial.println(" ft.");

     //*********************************
     
  }    // end of if (now.minute() != currMinute) statement

 
} // end of main loop

//******************************************************
// Function for printing the current date/time to the 
// serial port in a nicely formatted layout.
void printTime(DateTime now) {
  Serial.print(now.year(), DEC);
  Serial.print('/');
  Serial.print(now.month(), DEC);
  Serial.print('/');
  Serial.print(now.day(), DEC);
  Serial.print(' ');
  Serial.print(now.hour(), DEC);
  Serial.print(':');
  if (now.minute() < 10) {
    Serial.print("0");
    Serial.print(now.minute());
  }
  else if (now.minute() >= 10) {
    Serial.print(now.minute());
  }
  Serial.print(':');
  if (now.second() < 10) {
    Serial.print("0");
    Serial.println(now.second());
  }
  else if (now.second() >= 10) {
    Serial.println(now.second());
  }
}
//********************************************************
